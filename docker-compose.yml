version: '3'  # Версия файла Docker Compose

services:
  redis:
    image: redis:latest  # Используем официальный образ Redis
    container_name: redis_container  # Имя контейнера
    environment:
      REDIS_PASSWORD: 'root'
      REDIS_USER: 'default'
      REDIS_USER_PASSWORD: 'root'
    ports:
      - "6379:6379"  # Прокидываем порт
    networks:
      - my_network
    volumes:
      - redis_data:/data  # Создаем том для хранения данных
    command: >
      sh -c '
        mkdir -p /usr/local/etc/redis &&
        echo "bind 0.0.0.0" > /usr/local/etc/redis/redis.conf &&
        echo "requirepass root" >> /usr/local/etc/redis/redis.conf &&
        echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
        echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
        echo "user default on nopass ~* +@all" > /usr/local/etc/redis/users.acl &&
        echo "user admin on >root ~* +@all" >> /usr/local/etc/redis/users.acl &&
        redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
      '

  postgres:
    image: postgres:16.1-alpine3.19  # Используем официальный образ PostgreSQL
    container_name: postgres_container  # Имя контейнера
    environment:
      POSTGRES_DB: 'db_task'  # Имя базы данных
      POSTGRES_USER: 'fp_db_admin'  # Имя пользователя
      POSTGRES_PASSWORD: 'fp_db_admin'  # Пароль для пользователя
    command:
      - 'postgres'
      - '-c'
      - 'max_connections=50'
      - '-c'
      - 'shared_buffers=1GB'
      - '-c'
      - 'effective_cache_size=4GB'
      - '-c'
      - 'work_mem=16MB'
      - '-c'
      - 'maintenance_work_mem=512MB'
      - '-c'
      - 'random_page_cost=1.1'
      - '-c'
      - 'temp_file_limit=10GB'
      - '-c'
      - 'log_min_duration_statement=200ms'
      - '-c'
      - 'idle_in_transaction_session_timeout=10s'
      - '-c'
      - 'lock_timeout=1s'
      - '-c'
      - 'statement_timeout=60s'
      - '-c'
      - 'shared_preload_libraries=pg_stat_statements'
      - '-c'
      - 'pg_stat_statements.max=10000'
      - '-c'
      - 'pg_stat_statements.track=all'
    ports:
      - "5433:5432"  # Прокидываем порт
    networks:
      - my_network
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U fp_db_admin -d db_task' ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Создаем том для хранения данных

  app:
    build: .
    container_name: app_container  # Имя контейнера с приложением
    depends_on:
      - redis  # Указываем, что этот контейнер зависит от Redis
      - postgres  # Указываем, что этот контейнер зависит от PostgreSQL
    environment:
      REDIS_HOST: redis_container
    ports:
      - "8082:8082"  # Прокидываем порт приложения
    networks:
      - my_network  # Указываем, к какой сети будет подключен контейнер

networks:
  my_network:
    driver: bridge


volumes:
  redis_data:  # Том для Redis
  postgres_data:  # Том для PostgreSQL